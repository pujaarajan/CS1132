/** TIME SPENT: # hours and # minutes. */ 

package student;
import java.util.List;
import danaus.*;

public class Butterfly extends AbstractButterfly {
	public TileState[][] ts;


	public @Override TileState[][] learn() {
		ts = new TileState[getMapHeight()][getMapWidth()];
		DFS();
		return ts;
	}
	public void DFS() {
		refreshState();
		ts[state.location.row][state.location.col] = state;
		int tsCol = state.location.col;
		int tsRow = state.location.row;


		for (Direction d : Direction.values()){
			int yinbound = Common.mod(tsRow + d.dRow, getMapHeight());
			int xinbound = Common.mod(tsCol + d.dCol, getMapWidth());
			try{
				if (ts[yinbound][xinbound] == null){
					fly(d, Speed.NORMAL);
					refreshState();
					ts[state.location.row][state.location.col]=state;


					DFS();

					fly(Direction.opposite(d), Speed.NORMAL);
					refreshState(); 
				}
			}
			catch (ObstacleCollisionException c){ 
				ts[yinbound][xinbound] = TileState.nil ;
			}
		}
	}



	public @Override void run(List<Long> flowerIds) {
		// TODO: implement
	}
}